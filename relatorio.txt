Nome: Victor Chiaradia Gramuglia Araujo
nºUSP:9793756

- Andamento do programa:
        O programa é relativamente simples, apos receber os argumentos da linha
    de comando, o tipo de tabela desejada sera criada e o texto sera lido palavra
    por palavra (note que se o arquivo não existir havera um erro), ao final da
    palavra ela sera inserida na tabela, após o texto inteiro ser lido a tabela
    sera impressa comforme o estipulado pelo usuário e o programa acabara.

- Analize de complexidade:

    A complexidade das operações só leva em conta um iten, e não todos que serão
    inseridos.

    1- Vetor desordenado:
        A inserção de um novo item na tabela de simbolos tem complexidade O(n),
    pois é nescessario buscar linearmente no vetor, pórem não é nescessário fazer
    outras mudanças. Algumas vezes a tabela estara cheia e sera nescessário realocala
    , esta operação também é O(n) e ira acontecer poucas vezes já que sempre dobrarmos
    o tamanho da tabela, mesmo que seja nescessario aumentar a tabela a operação de
    inserção continua O(n). A operação de destruição da tabela sempre sera O(n)
    independente da implementação. Para imprimir a tabela, como é feita em ordem
    alfabetica ou de frequencia é nescessario primeiro ordenala, pórem como é
    usado um mergeSort esta operação é O(NlogN), o merge é usado duas vezes para
    ordenar por frequencia pois o primeiro merge garante que as palavras que possuem
    a mesma frequencia estarão em ordem alfabetica reversa,
    isso foi feito pois o codigo continua com uma complexidade O(NlogN).

    2-Vetor Ordenado:
        Embora a inserção agora seja mais rapida em relação ao Vetor desordenado
    devido a busca binaria temos o problema que temos que mudar uma parte dos
    itens de posição para que a tabela continue ordenada, assim não há ganho na
    rapidez mesmo ele estando ordenado. As outras funções irão ter o memso
    desempenho que antes a única diferença sera na impresão que não sera
    nescessario usar o mergeSort para imprimir em ordem alfabetica assim ela
    fica com complexidade O(n), quando for para imprimir em ordem de frequencia
    só um mergeSort sera usado, pórem a complexidade continua O(NlogN).

    3-Lista ligada desordenada:
        A inserção de um novo item na tabela de simbolos tem complexidade O(n),
    como no vetor, pórem dessa vez não é nescessario realocar a tebela, o que
    ira poupar algum tempo (pórem pouco) mas também não havera alocação de
    memoria que não sera usada (pórem a memoria que era "gastada" antes não era
    grande o suficiente para ser um problema). Como para imprimir a tabela é
    nescessario ordenala, foi criado um vetor com os elementos da tabela e esse
    vetor é ordenado usando a mesma função de mergeSort, a complexidade continua
    a mesma pórem o codigo ira ser mais lento para imprimir e ira gastar o dobro
    de memoria.

    4-Lista ligada Ordenada:
        Não existe muita diferença entre os dois tipos de lista, o fato de
    ela ser ordenada faz com que não seja nescessario percorrer a lista até
    o fim para saber se um item já tinha sido inserido, e ao contrario do vetor
    só é nescessario mudar dois ponteiros e não mudar varios itens de posição,
    pórem a complexidade continua linear, pórem o resto continua igual.

    5- Arvore de busca binaria (ABB):
        A inserção na ABB tem pior caso linear, pórem em aula foi dito que, o
    pior caso tem poucas chance de acontecer e que possui complexidade media
    O(logN), como com as listas ligadas não é usado mais memoria que é o
    nescessário e a impresão alfabética é linear. Como as funções são recursivas,
    existe um limite de quantas chamadas podem se encontar no stack pórem isso
    é um limite teorico.

-Teste de tempo:
        Para testar o tempo foi usado um arquivo com terceiro livro da serie
    Game of Thrones (2.4 Mb)  os dois primeiros livros da serie (3.4Mb) e o
    ultimo teste foi os ultimos quatro livros da serie Harry Potter (5.1 Mb).
            VD/A   VO/A   LD/A   LO/A   AB/A    VD/O   VO/O   LD/O   LO/O   AB/O
    test1:  4s     4s     6.6s   27.7s  0.018s  3.9s   4s     6.6s   30.8s  0.02s
    test2:  5.8s   5s     10s    48s    0.02s   6s     4s     10s    52s    0.02s
    test3:  9s     7.5s   15s    1m18s  0.03s   9s     7.2s   14.7s  1m24s  0.04s

        A lista ligada ordena possui um comportamento curioso, antes de a busca
    binaria ser implementada para o vetor ordenado, o algoritmo támbem era
    eneficiente:
        na função insereStableLO encontramos o código abaixo:

            while(temp != NULL && strcmp(key, temp->info.palavra) >= 0){
                if(!strcmp(key, temp->info.palavra)){
                    temp->info.freq++;
                    return(inicio);
                }
    A eneficiencia me faz acreditar que a comparação "strcmp(key, temp->info.palavra) >= 0"
    é responsavel pela demora no código, como não é possivel fazer uma busca
    binaria na lista não é possivel melhorar.

-Redundancia no codigo:
        Muitas funções que se encontram em .h's diferentes são as mesmas, como
    a função que cria uma tabela usando um vetor ordenado ou desordenado, isso
    foi feito pois pareceu fazer sentido que a função que cria/destroi a tabela
    se encontre em seu .h especifico e não em outro .h com um nome generico como
    myHeader.h.

-Comentários no codigo:
        Algumas funções possuem nehum comentário, isso foi feito por serem
    funções classicas, como a busca binaria ou por serem relativamente simples.
